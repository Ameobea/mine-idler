// @generated by protoc-gen-es v1.4.0 with parameter "target=ts"
// @generated from file protos/mine.proto (package mine, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum mine.SortBy
 */
export enum SortBy {
  /**
   * @generated from enum value: DateAcquired = 0;
   */
  DateAcquired = 0,

  /**
   * @generated from enum value: RarityTier = 1;
   */
  RarityTier = 1,

  /**
   * @generated from enum value: Value = 2;
   */
  Value = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SortBy)
proto3.util.setEnumType(SortBy, "mine.SortBy", [
  { no: 0, name: "DateAcquired" },
  { no: 1, name: "RarityTier" },
  { no: 2, name: "Value" },
]);

/**
 * @generated from enum mine.SortDirection
 */
export enum SortDirection {
  /**
   * @generated from enum value: Ascending = 0;
   */
  Ascending = 0,

  /**
   * @generated from enum value: Descending = 1;
   */
  Descending = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SortDirection)
proto3.util.setEnumType(SortDirection, "mine.SortDirection", [
  { no: 0, name: "Ascending" },
  { no: 1, name: "Descending" },
]);

/**
 * @generated from enum mine.UpgradeType
 */
export enum UpgradeType {
  /**
   * @generated from enum value: Storage = 0;
   */
  Storage = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(UpgradeType)
proto3.util.setEnumType(UpgradeType, "mine.UpgradeType", [
  { no: 0, name: "Storage" },
]);

/**
 * @generated from message mine.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message mine.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: string session_token = 1;
   */
  sessionToken = "";

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message mine.RegisterRequest
 */
export class RegisterRequest extends Message<RegisterRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<RegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.RegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterRequest {
    return new RegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterRequest {
    return new RegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterRequest | PlainMessage<RegisterRequest> | undefined, b: RegisterRequest | PlainMessage<RegisterRequest> | undefined): boolean {
    return proto3.util.equals(RegisterRequest, a, b);
  }
}

/**
 * @generated from message mine.RegisterResponse
 */
export class RegisterResponse extends Message<RegisterResponse> {
  /**
   * @generated from field: string session_token = 1;
   */
  sessionToken = "";

  constructor(data?: PartialMessage<RegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.RegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterResponse {
    return new RegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterResponse | PlainMessage<RegisterResponse> | undefined, b: RegisterResponse | PlainMessage<RegisterResponse> | undefined): boolean {
    return proto3.util.equals(RegisterResponse, a, b);
  }
}

/**
 * @generated from message mine.HiscoreEntry
 */
export class HiscoreEntry extends Message<HiscoreEntry> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: float total_value = 2;
   */
  totalValue = 0;

  constructor(data?: PartialMessage<HiscoreEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.HiscoreEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HiscoreEntry {
    return new HiscoreEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HiscoreEntry {
    return new HiscoreEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HiscoreEntry {
    return new HiscoreEntry().fromJsonString(jsonString, options);
  }

  static equals(a: HiscoreEntry | PlainMessage<HiscoreEntry> | undefined, b: HiscoreEntry | PlainMessage<HiscoreEntry> | undefined): boolean {
    return proto3.util.equals(HiscoreEntry, a, b);
  }
}

/**
 * @generated from message mine.GetHiscoresRequest
 */
export class GetHiscoresRequest extends Message<GetHiscoresRequest> {
  constructor(data?: PartialMessage<GetHiscoresRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetHiscoresRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHiscoresRequest {
    return new GetHiscoresRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHiscoresRequest {
    return new GetHiscoresRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHiscoresRequest {
    return new GetHiscoresRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHiscoresRequest | PlainMessage<GetHiscoresRequest> | undefined, b: GetHiscoresRequest | PlainMessage<GetHiscoresRequest> | undefined): boolean {
    return proto3.util.equals(GetHiscoresRequest, a, b);
  }
}

/**
 * @generated from message mine.GetHiscoresResponse
 */
export class GetHiscoresResponse extends Message<GetHiscoresResponse> {
  /**
   * @generated from field: repeated mine.HiscoreEntry hiscores = 1;
   */
  hiscores: HiscoreEntry[] = [];

  constructor(data?: PartialMessage<GetHiscoresResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetHiscoresResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hiscores", kind: "message", T: HiscoreEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHiscoresResponse {
    return new GetHiscoresResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHiscoresResponse {
    return new GetHiscoresResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHiscoresResponse {
    return new GetHiscoresResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHiscoresResponse | PlainMessage<GetHiscoresResponse> | undefined, b: GetHiscoresResponse | PlainMessage<GetHiscoresResponse> | undefined): boolean {
    return proto3.util.equals(GetHiscoresResponse, a, b);
  }
}

/**
 * @generated from message mine.ItemDescriptor
 */
export class ItemDescriptor extends Message<ItemDescriptor> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: uint32 rarity_tier = 2;
   */
  rarityTier = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: optional string image_url = 6;
   */
  imageUrl?: string;

  constructor(data?: PartialMessage<ItemDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.ItemDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "rarity_tier", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemDescriptor {
    return new ItemDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemDescriptor {
    return new ItemDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemDescriptor {
    return new ItemDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: ItemDescriptor | PlainMessage<ItemDescriptor> | undefined, b: ItemDescriptor | PlainMessage<ItemDescriptor> | undefined): boolean {
    return proto3.util.equals(ItemDescriptor, a, b);
  }
}

/**
 * @generated from message mine.GetItemDescriptorsRequest
 */
export class GetItemDescriptorsRequest extends Message<GetItemDescriptorsRequest> {
  constructor(data?: PartialMessage<GetItemDescriptorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetItemDescriptorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemDescriptorsRequest {
    return new GetItemDescriptorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemDescriptorsRequest {
    return new GetItemDescriptorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemDescriptorsRequest {
    return new GetItemDescriptorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemDescriptorsRequest | PlainMessage<GetItemDescriptorsRequest> | undefined, b: GetItemDescriptorsRequest | PlainMessage<GetItemDescriptorsRequest> | undefined): boolean {
    return proto3.util.equals(GetItemDescriptorsRequest, a, b);
  }
}

/**
 * @generated from message mine.GetItemDescriptorsResponse
 */
export class GetItemDescriptorsResponse extends Message<GetItemDescriptorsResponse> {
  /**
   * @generated from field: repeated mine.ItemDescriptor item_descriptors = 1;
   */
  itemDescriptors: ItemDescriptor[] = [];

  constructor(data?: PartialMessage<GetItemDescriptorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetItemDescriptorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_descriptors", kind: "message", T: ItemDescriptor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemDescriptorsResponse {
    return new GetItemDescriptorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemDescriptorsResponse {
    return new GetItemDescriptorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemDescriptorsResponse {
    return new GetItemDescriptorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetItemDescriptorsResponse | PlainMessage<GetItemDescriptorsResponse> | undefined, b: GetItemDescriptorsResponse | PlainMessage<GetItemDescriptorsResponse> | undefined): boolean {
    return proto3.util.equals(GetItemDescriptorsResponse, a, b);
  }
}

/**
 * @generated from message mine.GetAccountRequest
 */
export class GetAccountRequest extends Message<GetAccountRequest> {
  constructor(data?: PartialMessage<GetAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountRequest {
    return new GetAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountRequest {
    return new GetAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountRequest {
    return new GetAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountRequest | PlainMessage<GetAccountRequest> | undefined, b: GetAccountRequest | PlainMessage<GetAccountRequest> | undefined): boolean {
    return proto3.util.equals(GetAccountRequest, a, b);
  }
}

/**
 * @generated from message mine.UserAccountInfo
 */
export class UserAccountInfo extends Message<UserAccountInfo> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  constructor(data?: PartialMessage<UserAccountInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.UserAccountInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserAccountInfo {
    return new UserAccountInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserAccountInfo {
    return new UserAccountInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserAccountInfo {
    return new UserAccountInfo().fromJsonString(jsonString, options);
  }

  static equals(a: UserAccountInfo | PlainMessage<UserAccountInfo> | undefined, b: UserAccountInfo | PlainMessage<UserAccountInfo> | undefined): boolean {
    return proto3.util.equals(UserAccountInfo, a, b);
  }
}

/**
 * @generated from message mine.GetAccountResponse
 */
export class GetAccountResponse extends Message<GetAccountResponse> {
  /**
   * @generated from field: mine.UserAccountInfo user_account_info = 1;
   */
  userAccountInfo?: UserAccountInfo;

  constructor(data?: PartialMessage<GetAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_account_info", kind: "message", T: UserAccountInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAccountResponse {
    return new GetAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAccountResponse {
    return new GetAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAccountResponse {
    return new GetAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAccountResponse | PlainMessage<GetAccountResponse> | undefined, b: GetAccountResponse | PlainMessage<GetAccountResponse> | undefined): boolean {
    return proto3.util.equals(GetAccountResponse, a, b);
  }
}

/**
 * @generated from message mine.StartMiningRequest
 */
export class StartMiningRequest extends Message<StartMiningRequest> {
  /**
   * @generated from field: string location_name = 1;
   */
  locationName = "";

  constructor(data?: PartialMessage<StartMiningRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.StartMiningRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "location_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartMiningRequest {
    return new StartMiningRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartMiningRequest {
    return new StartMiningRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartMiningRequest {
    return new StartMiningRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartMiningRequest | PlainMessage<StartMiningRequest> | undefined, b: StartMiningRequest | PlainMessage<StartMiningRequest> | undefined): boolean {
    return proto3.util.equals(StartMiningRequest, a, b);
  }
}

/**
 * @generated from message mine.ItemModifier
 */
export class ItemModifier extends Message<ItemModifier> {
  constructor(data?: PartialMessage<ItemModifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.ItemModifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemModifier {
    return new ItemModifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemModifier {
    return new ItemModifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemModifier {
    return new ItemModifier().fromJsonString(jsonString, options);
  }

  static equals(a: ItemModifier | PlainMessage<ItemModifier> | undefined, b: ItemModifier | PlainMessage<ItemModifier> | undefined): boolean {
    return proto3.util.equals(ItemModifier, a, b);
  }
}

/**
 * @generated from message mine.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: float quality = 2;
   */
  quality = 0;

  /**
   * @generated from field: repeated mine.ItemModifier modifiers = 3;
   */
  modifiers: ItemModifier[] = [];

  /**
   * @generated from field: float value = 4;
   */
  value = 0;

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "quality", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "modifiers", kind: "message", T: ItemModifier, repeated: true },
    { no: 4, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(a: Item | PlainMessage<Item> | undefined, b: Item | PlainMessage<Item> | undefined): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * @generated from message mine.StartMiningResponse
 */
export class StartMiningResponse extends Message<StartMiningResponse> {
  /**
   * @generated from field: mine.Item loot = 1;
   */
  loot?: Item;

  constructor(data?: PartialMessage<StartMiningResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.StartMiningResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "loot", kind: "message", T: Item },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartMiningResponse {
    return new StartMiningResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartMiningResponse {
    return new StartMiningResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartMiningResponse {
    return new StartMiningResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartMiningResponse | PlainMessage<StartMiningResponse> | undefined, b: StartMiningResponse | PlainMessage<StartMiningResponse> | undefined): boolean {
    return proto3.util.equals(StartMiningResponse, a, b);
  }
}

/**
 * @generated from message mine.GetMineLocationsRequest
 */
export class GetMineLocationsRequest extends Message<GetMineLocationsRequest> {
  constructor(data?: PartialMessage<GetMineLocationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetMineLocationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMineLocationsRequest {
    return new GetMineLocationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMineLocationsRequest {
    return new GetMineLocationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMineLocationsRequest {
    return new GetMineLocationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMineLocationsRequest | PlainMessage<GetMineLocationsRequest> | undefined, b: GetMineLocationsRequest | PlainMessage<GetMineLocationsRequest> | undefined): boolean {
    return proto3.util.equals(GetMineLocationsRequest, a, b);
  }
}

/**
 * @generated from message mine.MineLocationDescriptor
 */
export class MineLocationDescriptor extends Message<MineLocationDescriptor> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<MineLocationDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.MineLocationDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MineLocationDescriptor {
    return new MineLocationDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MineLocationDescriptor {
    return new MineLocationDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MineLocationDescriptor {
    return new MineLocationDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: MineLocationDescriptor | PlainMessage<MineLocationDescriptor> | undefined, b: MineLocationDescriptor | PlainMessage<MineLocationDescriptor> | undefined): boolean {
    return proto3.util.equals(MineLocationDescriptor, a, b);
  }
}

/**
 * @generated from message mine.MineLocationRes
 */
export class MineLocationRes extends Message<MineLocationRes> {
  /**
   * @generated from field: mine.MineLocationDescriptor descriptor = 1;
   */
  descriptor?: MineLocationDescriptor;

  /**
   * @generated from field: bool is_available = 2;
   */
  isAvailable = false;

  constructor(data?: PartialMessage<MineLocationRes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.MineLocationRes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "descriptor", kind: "message", T: MineLocationDescriptor },
    { no: 2, name: "is_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MineLocationRes {
    return new MineLocationRes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MineLocationRes {
    return new MineLocationRes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MineLocationRes {
    return new MineLocationRes().fromJsonString(jsonString, options);
  }

  static equals(a: MineLocationRes | PlainMessage<MineLocationRes> | undefined, b: MineLocationRes | PlainMessage<MineLocationRes> | undefined): boolean {
    return proto3.util.equals(MineLocationRes, a, b);
  }
}

/**
 * @generated from message mine.GetMineLocationsResponse
 */
export class GetMineLocationsResponse extends Message<GetMineLocationsResponse> {
  /**
   * @generated from field: repeated mine.MineLocationRes mine_locations = 1;
   */
  mineLocations: MineLocationRes[] = [];

  constructor(data?: PartialMessage<GetMineLocationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetMineLocationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mine_locations", kind: "message", T: MineLocationRes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMineLocationsResponse {
    return new GetMineLocationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMineLocationsResponse {
    return new GetMineLocationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMineLocationsResponse {
    return new GetMineLocationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMineLocationsResponse | PlainMessage<GetMineLocationsResponse> | undefined, b: GetMineLocationsResponse | PlainMessage<GetMineLocationsResponse> | undefined): boolean {
    return proto3.util.equals(GetMineLocationsResponse, a, b);
  }
}

/**
 * @generated from message mine.GetInventoryRequest
 */
export class GetInventoryRequest extends Message<GetInventoryRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: uint32 page_number = 2;
   */
  pageNumber = 0;

  /**
   * @generated from field: mine.SortBy sort_by = 3;
   */
  sortBy = SortBy.DateAcquired;

  /**
   * @generated from field: mine.SortDirection sort_direction = 4;
   */
  sortDirection = SortDirection.Ascending;

  constructor(data?: PartialMessage<GetInventoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetInventoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "sort_by", kind: "enum", T: proto3.getEnumType(SortBy) },
    { no: 4, name: "sort_direction", kind: "enum", T: proto3.getEnumType(SortDirection) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInventoryRequest {
    return new GetInventoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInventoryRequest | PlainMessage<GetInventoryRequest> | undefined, b: GetInventoryRequest | PlainMessage<GetInventoryRequest> | undefined): boolean {
    return proto3.util.equals(GetInventoryRequest, a, b);
  }
}

/**
 * @generated from message mine.ItemQualityHistogram
 */
export class ItemQualityHistogram extends Message<ItemQualityHistogram> {
  /**
   * @generated from field: repeated uint32 buckets = 3;
   */
  buckets: number[] = [];

  constructor(data?: PartialMessage<ItemQualityHistogram>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.ItemQualityHistogram";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "buckets", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemQualityHistogram {
    return new ItemQualityHistogram().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemQualityHistogram {
    return new ItemQualityHistogram().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemQualityHistogram {
    return new ItemQualityHistogram().fromJsonString(jsonString, options);
  }

  static equals(a: ItemQualityHistogram | PlainMessage<ItemQualityHistogram> | undefined, b: ItemQualityHistogram | PlainMessage<ItemQualityHistogram> | undefined): boolean {
    return proto3.util.equals(ItemQualityHistogram, a, b);
  }
}

/**
 * @generated from message mine.AggregatedItemCount
 */
export class AggregatedItemCount extends Message<AggregatedItemCount> {
  /**
   * @generated from field: uint32 item_id = 1;
   */
  itemId = 0;

  /**
   * @generated from field: uint32 total_count = 2;
   */
  totalCount = 0;

  /**
   * @generated from field: float total_quality = 3;
   */
  totalQuality = 0;

  /**
   * @generated from field: float total_value = 4;
   */
  totalValue = 0;

  /**
   * @generated from field: mine.ItemQualityHistogram quality_histogram = 5;
   */
  qualityHistogram?: ItemQualityHistogram;

  constructor(data?: PartialMessage<AggregatedItemCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.AggregatedItemCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "total_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "total_quality", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "total_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "quality_histogram", kind: "message", T: ItemQualityHistogram },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregatedItemCount {
    return new AggregatedItemCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregatedItemCount {
    return new AggregatedItemCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregatedItemCount {
    return new AggregatedItemCount().fromJsonString(jsonString, options);
  }

  static equals(a: AggregatedItemCount | PlainMessage<AggregatedItemCount> | undefined, b: AggregatedItemCount | PlainMessage<AggregatedItemCount> | undefined): boolean {
    return proto3.util.equals(AggregatedItemCount, a, b);
  }
}

/**
 * @generated from message mine.AggregatedInventory
 */
export class AggregatedInventory extends Message<AggregatedInventory> {
  /**
   * @generated from field: repeated mine.AggregatedItemCount item_counts = 1;
   */
  itemCounts: AggregatedItemCount[] = [];

  constructor(data?: PartialMessage<AggregatedInventory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.AggregatedInventory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_counts", kind: "message", T: AggregatedItemCount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AggregatedInventory {
    return new AggregatedInventory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AggregatedInventory {
    return new AggregatedInventory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AggregatedInventory {
    return new AggregatedInventory().fromJsonString(jsonString, options);
  }

  static equals(a: AggregatedInventory | PlainMessage<AggregatedInventory> | undefined, b: AggregatedInventory | PlainMessage<AggregatedInventory> | undefined): boolean {
    return proto3.util.equals(AggregatedInventory, a, b);
  }
}

/**
 * @generated from message mine.GetInventoryResponse
 */
export class GetInventoryResponse extends Message<GetInventoryResponse> {
  /**
   * @generated from field: repeated mine.Item items = 1;
   */
  items: Item[] = [];

  /**
   * total items in the full inventory, before any filtering or pagination
   *
   * @generated from field: uint32 total_items = 2;
   */
  totalItems = 0;

  /**
   * @generated from field: mine.AggregatedInventory aggregated_inventory = 3;
   */
  aggregatedInventory?: AggregatedInventory;

  constructor(data?: PartialMessage<GetInventoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetInventoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Item, repeated: true },
    { no: 2, name: "total_items", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "aggregated_inventory", kind: "message", T: AggregatedInventory },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInventoryResponse {
    return new GetInventoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInventoryResponse | PlainMessage<GetInventoryResponse> | undefined, b: GetInventoryResponse | PlainMessage<GetInventoryResponse> | undefined): boolean {
    return proto3.util.equals(GetInventoryResponse, a, b);
  }
}

/**
 * @generated from message mine.StopMiningRequest
 */
export class StopMiningRequest extends Message<StopMiningRequest> {
  constructor(data?: PartialMessage<StopMiningRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.StopMiningRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopMiningRequest {
    return new StopMiningRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopMiningRequest {
    return new StopMiningRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopMiningRequest {
    return new StopMiningRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopMiningRequest | PlainMessage<StopMiningRequest> | undefined, b: StopMiningRequest | PlainMessage<StopMiningRequest> | undefined): boolean {
    return proto3.util.equals(StopMiningRequest, a, b);
  }
}

/**
 * @generated from message mine.StopMiningResponse
 */
export class StopMiningResponse extends Message<StopMiningResponse> {
  constructor(data?: PartialMessage<StopMiningResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.StopMiningResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopMiningResponse {
    return new StopMiningResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopMiningResponse {
    return new StopMiningResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopMiningResponse {
    return new StopMiningResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopMiningResponse | PlainMessage<StopMiningResponse> | undefined, b: StopMiningResponse | PlainMessage<StopMiningResponse> | undefined): boolean {
    return proto3.util.equals(StopMiningResponse, a, b);
  }
}

/**
 * @generated from message mine.GetBaseRequest
 */
export class GetBaseRequest extends Message<GetBaseRequest> {
  constructor(data?: PartialMessage<GetBaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetBaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBaseRequest {
    return new GetBaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBaseRequest {
    return new GetBaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBaseRequest {
    return new GetBaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBaseRequest | PlainMessage<GetBaseRequest> | undefined, b: GetBaseRequest | PlainMessage<GetBaseRequest> | undefined): boolean {
    return proto3.util.equals(GetBaseRequest, a, b);
  }
}

/**
 * @generated from message mine.ItemCost
 */
export class ItemCost extends Message<ItemCost> {
  /**
   * @generated from field: uint32 item_id = 1;
   */
  itemId = 0;

  /**
   * @generated from field: float total_quality = 2;
   */
  totalQuality = 0;

  constructor(data?: PartialMessage<ItemCost>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.ItemCost";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "total_quality", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ItemCost {
    return new ItemCost().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ItemCost {
    return new ItemCost().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ItemCost {
    return new ItemCost().fromJsonString(jsonString, options);
  }

  static equals(a: ItemCost | PlainMessage<ItemCost> | undefined, b: ItemCost | PlainMessage<ItemCost> | undefined): boolean {
    return proto3.util.equals(ItemCost, a, b);
  }
}

/**
 * @generated from message mine.StorageUpgrades
 */
export class StorageUpgrades extends Message<StorageUpgrades> {
  /**
   * @generated from field: uint32 storage_level = 1;
   */
  storageLevel = 0;

  /**
   * @generated from field: uint32 storage_capacity = 2;
   */
  storageCapacity = 0;

  /**
   * @generated from field: repeated mine.ItemCost upgrade_cost = 3;
   */
  upgradeCost: ItemCost[] = [];

  constructor(data?: PartialMessage<StorageUpgrades>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.StorageUpgrades";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storage_level", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "storage_capacity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "upgrade_cost", kind: "message", T: ItemCost, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StorageUpgrades {
    return new StorageUpgrades().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StorageUpgrades {
    return new StorageUpgrades().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StorageUpgrades {
    return new StorageUpgrades().fromJsonString(jsonString, options);
  }

  static equals(a: StorageUpgrades | PlainMessage<StorageUpgrades> | undefined, b: StorageUpgrades | PlainMessage<StorageUpgrades> | undefined): boolean {
    return proto3.util.equals(StorageUpgrades, a, b);
  }
}

/**
 * @generated from message mine.Upgrades
 */
export class Upgrades extends Message<Upgrades> {
  /**
   * @generated from field: mine.StorageUpgrades storage_upgrades = 1;
   */
  storageUpgrades?: StorageUpgrades;

  constructor(data?: PartialMessage<Upgrades>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.Upgrades";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storage_upgrades", kind: "message", T: StorageUpgrades },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Upgrades {
    return new Upgrades().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Upgrades {
    return new Upgrades().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Upgrades {
    return new Upgrades().fromJsonString(jsonString, options);
  }

  static equals(a: Upgrades | PlainMessage<Upgrades> | undefined, b: Upgrades | PlainMessage<Upgrades> | undefined): boolean {
    return proto3.util.equals(Upgrades, a, b);
  }
}

/**
 * @generated from message mine.GetBaseResponse
 */
export class GetBaseResponse extends Message<GetBaseResponse> {
  /**
   * @generated from field: mine.Upgrades upgrades = 1;
   */
  upgrades?: Upgrades;

  constructor(data?: PartialMessage<GetBaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.GetBaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upgrades", kind: "message", T: Upgrades },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBaseResponse {
    return new GetBaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBaseResponse {
    return new GetBaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBaseResponse {
    return new GetBaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBaseResponse | PlainMessage<GetBaseResponse> | undefined, b: GetBaseResponse | PlainMessage<GetBaseResponse> | undefined): boolean {
    return proto3.util.equals(GetBaseResponse, a, b);
  }
}

/**
 * @generated from message mine.UpgradeBaseRequest
 */
export class UpgradeBaseRequest extends Message<UpgradeBaseRequest> {
  /**
   * @generated from field: mine.UpgradeType upgrade_type = 1;
   */
  upgradeType = UpgradeType.Storage;

  constructor(data?: PartialMessage<UpgradeBaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.UpgradeBaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upgrade_type", kind: "enum", T: proto3.getEnumType(UpgradeType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeBaseRequest {
    return new UpgradeBaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeBaseRequest {
    return new UpgradeBaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeBaseRequest {
    return new UpgradeBaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeBaseRequest | PlainMessage<UpgradeBaseRequest> | undefined, b: UpgradeBaseRequest | PlainMessage<UpgradeBaseRequest> | undefined): boolean {
    return proto3.util.equals(UpgradeBaseRequest, a, b);
  }
}

/**
 * @generated from message mine.UpgradeBaseResponse
 */
export class UpgradeBaseResponse extends Message<UpgradeBaseResponse> {
  /**
   * @generated from field: mine.Upgrades upgrades = 1;
   */
  upgrades?: Upgrades;

  constructor(data?: PartialMessage<UpgradeBaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mine.UpgradeBaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upgrades", kind: "message", T: Upgrades },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeBaseResponse {
    return new UpgradeBaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeBaseResponse {
    return new UpgradeBaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeBaseResponse {
    return new UpgradeBaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeBaseResponse | PlainMessage<UpgradeBaseResponse> | undefined, b: UpgradeBaseResponse | PlainMessage<UpgradeBaseResponse> | undefined): boolean {
    return proto3.util.equals(UpgradeBaseResponse, a, b);
  }
}

